pub enum HttpStatus {
        // 1xx - Informational
        Continue = 100,
        SwitchingProtocols = 101,
        Processing = 102,
        EarlyHints = 103,
    
        // 2xx - Successful
        OK = 200,
        Created = 201,
        Accepted = 202,
        NonAuthoritativeInformation = 203,
        NoContent = 204,
        ResetContent = 205,
        PartialContent = 206,
        MultiStatus = 207,
        AlreadyReported = 208,
        IMUsed = 226,
    
        // 3xx - Redirection
        MultipleChoices = 300,
        MovedPermanently = 301,
        Found = 302,
        SeeOther = 303,
        NotModified = 304,
        UseProxy = 305,
        SwitchProxy = 306,
        TemporaryRedirect = 307,
        PermanentRedirect = 308,
    
        // 4xx - Client Errors
        BadRequest = 400,
        Unauthorized = 401,
        PaymentRequired = 402,
        Forbidden = 403,
        NotFound = 404,
        MethodNotAllowed = 405,
        NotAcceptable = 406,
        ProxyAuthenticationRequired = 407,
        RequestTimeout = 408,
        Conflict = 409,
        Gone = 410,
        LengthRequired = 411,
        PreconditionFailed = 412,
        PayloadTooLarge = 413,
        URITooLong = 414,
        UnsupportedMediaType = 415,
        RangeNotSatisfiable = 416,
        ExpectationFailed = 417,
        ImATeapot = 418,  // RFC 2324
        MisdirectedRequest = 421,
        UnprocessableEntity = 422,
        Locked = 423,
        FailedDependency = 424,
        TooEarly = 425,
        UpgradeRequired = 426,
        PreconditionRequired = 428,
    
        // 5xx - Server Errors
        InternalServerError = 500,
        NotImplemented = 501,
        BadGateway = 502,
        ServiceUnavailable = 503,
        GatewayTimeout = 504,
        HTTPVersionNotSupported = 505,
        VariantAlsoNegotiates = 506,
        InsufficientStorage = 507,
        LoopDetected = 508,
        NotExtended = 510,
        NetworkAuthenticationRequired = 511,
}
    
impl HttpStatus {
    // This method returns the full HTTP status line, e.g., "HTTP/1.1 200 OK"
        pub fn status_line(&self) -> String {
            match self {
                HttpStatus::Continue => "HTTP/1.1 100 Continue\n".to_string(),
                HttpStatus::SwitchingProtocols => "HTTP/1.1 101 Switching Protocols\n".to_string(),
                HttpStatus::Processing => "HTTP/1.1 102 Processing\n".to_string(),
                HttpStatus::EarlyHints => "HTTP/1.1 103 Early Hints\n".to_string(),
                HttpStatus::OK => "HTTP/1.1 200 OK\n".to_string(),
                HttpStatus::Created => "HTTP/1.1 201 Created\n".to_string(),
                HttpStatus::Accepted => "HTTP/1.1 202 Accepted\n".to_string(),
                HttpStatus::NonAuthoritativeInformation => "HTTP/1.1 203 Non-Authoritative Information\n".to_string(),
                HttpStatus::NoContent => "HTTP/1.1 204 No Content\n".to_string(),
                HttpStatus::ResetContent => "HTTP/1.1 205 Reset Content\n".to_string(),
                HttpStatus::PartialContent => "HTTP/1.1 206 Partial Content\n".to_string(),
                HttpStatus::MultiStatus => "HTTP/1.1 207 Multi-Status\n".to_string(),
                HttpStatus::AlreadyReported => "HTTP/1.1 208 Already Reported\n".to_string(),
                HttpStatus::IMUsed => "HTTP/1.1 226 IM Used\n".to_string(),
                HttpStatus::MultipleChoices => "HTTP/1.1 300 Multiple Choices\n".to_string(),
                HttpStatus::MovedPermanently => "HTTP/1.1 301 Moved Permanently\n".to_string(),
                HttpStatus::Found => "HTTP/1.1 302 Found\n".to_string(),
                HttpStatus::SeeOther => "HTTP/1.1 303 See Other\n".to_string(),
                HttpStatus::NotModified => "HTTP/1.1 304 Not Modified\n".to_string(),
                HttpStatus::UseProxy => "HTTP/1.1 305 Use Proxy\n".to_string(),
                HttpStatus::SwitchProxy => "HTTP/1.1 306 Switch Proxy\n".to_string(),
                HttpStatus::TemporaryRedirect => "HTTP/1.1 307 Temporary Redirect\n".to_string(),
                HttpStatus::PermanentRedirect => "HTTP/1.1 308 Permanent Redirect\n".to_string(),
                HttpStatus::BadRequest => "HTTP/1.1 400 Bad Request\n".to_string(),
                HttpStatus::Unauthorized => "HTTP/1.1 401 Unauthorized\n".to_string(),
                HttpStatus::PaymentRequired => "HTTP/1.1 402 Payment Required\n".to_string(),
                HttpStatus::Forbidden => "HTTP/1.1 403 Forbidden\n".to_string(),
                HttpStatus::NotFound => "HTTP/1.1 404 Not Found\n".to_string(),
                HttpStatus::MethodNotAllowed => "HTTP/1.1 405 Method Not Allowed\n".to_string(),
                HttpStatus::NotAcceptable => "HTTP/1.1 406 Not Acceptable\n".to_string(),
                HttpStatus::ProxyAuthenticationRequired => "HTTP/1.1 407 Proxy Authentication Required\n".to_string(),
                HttpStatus::RequestTimeout => "HTTP/1.1 408 Request Timeout\n".to_string(),
                HttpStatus::Conflict => "HTTP/1.1 409 Conflict\n".to_string(),
                HttpStatus::Gone => "HTTP/1.1 410 Gone\n".to_string(),
                HttpStatus::LengthRequired => "HTTP/1.1 411 Length Required\n".to_string(),
                HttpStatus::PreconditionFailed => "HTTP/1.1 412 Precondition Failed\n".to_string(),
                HttpStatus::PayloadTooLarge => "HTTP/1.1 413 Payload Too Large\n".to_string(),
                HttpStatus::URITooLong => "HTTP/1.1 414 URI Too Long\n".to_string(),
                HttpStatus::UnsupportedMediaType => "HTTP/1.1 415 Unsupported Media Type\n".to_string(),
                HttpStatus::RangeNotSatisfiable => "HTTP/1.1 416 Range Not Satisfiable\n".to_string(),
                HttpStatus::ExpectationFailed => "HTTP/1.1 417 Expectation Failed\n".to_string(),
                HttpStatus::ImATeapot => "HTTP/1.1 418 I'm a teapot\n".to_string(),
                HttpStatus::MisdirectedRequest => "HTTP/1.1 421 Misdirected Request\n".to_string(),
                HttpStatus::UnprocessableEntity => "HTTP/1.1 422 Unprocessable Entity\n".to_string(),
                HttpStatus::Locked => "HTTP/1.1 423 Locked\n".to_string(),
                HttpStatus::FailedDependency => "HTTP/1.1 424 Failed Dependency\n".to_string(),
                HttpStatus::TooEarly => "HTTP/1.1 425 Too Early\n".to_string(),
                HttpStatus::UpgradeRequired => "HTTP/1.1 426 Upgrade Required\n".to_string(),
                HttpStatus::PreconditionRequired => "HTTP/1.1 428 Precondition Required\n".to_string(),
                HttpStatus::InternalServerError => "HTTP/1.1 500 Internal Server Error\n".to_string(),
                HttpStatus::NotImplemented => "HTTP/1.1 501 Not Implemented\n".to_string(),
                HttpStatus::BadGateway => "HTTP/1.1 502 Bad Gateway\n".to_string(),
                HttpStatus::ServiceUnavailable => "HTTP/1.1 503 Service Unavailable\n".to_string(),
                HttpStatus::GatewayTimeout => "HTTP/1.1 504 Gateway Timeout\n".to_string(),
                HttpStatus::HTTPVersionNotSupported => "HTTP/1.1 505 HTTP Version Not Supported\n".to_string(),
                HttpStatus::VariantAlsoNegotiates => "HTTP/1.1 506 Variant Also Negotiates\n".to_string(),
                HttpStatus::InsufficientStorage => "HTTP/1.1 507 Insufficient Storage\n".to_string(),
                HttpStatus::LoopDetected => "HTTP/1.1 508 Loop Detected\n".to_string(),
                HttpStatus::NotExtended => "HTTP/1.1 510 Not Extended\n".to_string(),
                HttpStatus::NetworkAuthenticationRequired => "HTTP/1.1 511 Network Authentication Required\n".to_string(),
        }
    }
}